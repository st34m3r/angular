/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Categorie } from '../model/categorie';
import { CollectionModelBankClass } from '../model/collectionModelBankClass';
import { CollectionModelCategorie } from '../model/collectionModelCategorie';
import { CollectionModelCategorieFournisseur } from '../model/collectionModelCategorieFournisseur';
import { CollectionModelCategorieMember } from '../model/collectionModelCategorieMember';
import { CollectionModelCategorieProduct } from '../model/collectionModelCategorieProduct';
import { CollectionModelCategorieSociete } from '../model/collectionModelCategorieSociete';
import { EntityModelBankClass } from '../model/entityModelBankClass';
import { EntityModelCategorie } from '../model/entityModelCategorie';
import { EntityModelCategorieFournisseur } from '../model/entityModelCategorieFournisseur';
import { EntityModelCategorieMember } from '../model/entityModelCategorieMember';
import { EntityModelCategorieProduct } from '../model/entityModelCategorieProduct';
import { EntityModelCategorieSociete } from '../model/entityModelCategorieSociete';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CategorieEntityService {

    protected basePath = 'https://localhost:8005';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * categorieBank_classes
     * 
     * @param bankClassId bank_classId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingDELETE(bankClassId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieBankClassesUsingDELETE(bankClassId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieBankClassesUsingDELETE(bankClassId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieBankClassesUsingDELETE(bankClassId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bankClassId === null || bankClassId === undefined) {
            throw new Error('Required parameter bankClassId was null or undefined when calling categorieBankClassesUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes/${encodeURIComponent(String(bankClassId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieBank_classes
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieBankClassesUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieBankClassesUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieBankClassesUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieBank_classes
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelBankClass>;
    public categorieBankClassesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelBankClass>>;
    public categorieBankClassesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelBankClass>>;
    public categorieBankClassesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelBankClass>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieBank_classes
     * 
     * @param bankClassId bank_classId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingGET1(bankClassId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelBankClass>;
    public categorieBankClassesUsingGET1(bankClassId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelBankClass>>;
    public categorieBankClassesUsingGET1(bankClassId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelBankClass>>;
    public categorieBankClassesUsingGET1(bankClassId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bankClassId === null || bankClassId === undefined) {
            throw new Error('Required parameter bankClassId was null or undefined when calling categorieBankClassesUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelBankClass>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes/${encodeURIComponent(String(bankClassId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieBank_classes
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelBankClass>;
    public categorieBankClassesUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelBankClass>>;
    public categorieBankClassesUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelBankClass>>;
    public categorieBankClassesUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieBankClassesUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelBankClass>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieBank_classes
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelBankClass>;
    public categorieBankClassesUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelBankClass>>;
    public categorieBankClassesUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelBankClass>>;
    public categorieBankClassesUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieBankClassesUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelBankClass>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieBank_classes
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieBankClassesUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelBankClass>;
    public categorieBankClassesUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelBankClass>>;
    public categorieBankClassesUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelBankClass>>;
    public categorieBankClassesUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieBankClassesUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieBankClassesUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelBankClass>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/bank_classes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param categorieFournisseurId categorie_fournisseurId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingDELETE(categorieFournisseurId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieFournisseursUsingDELETE(categorieFournisseurId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieFournisseursUsingDELETE(categorieFournisseurId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieFournisseursUsingDELETE(categorieFournisseurId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieFournisseurId === null || categorieFournisseurId === undefined) {
            throw new Error('Required parameter categorieFournisseurId was null or undefined when calling categorieCategorieFournisseursUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs/${encodeURIComponent(String(categorieFournisseurId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieFournisseursUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieFournisseursUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieFournisseursUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieFournisseur>;
    public categorieCategorieFournisseursUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCategorieFournisseur>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param categorieFournisseurId categorie_fournisseurId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingGET1(categorieFournisseurId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorieFournisseur>;
    public categorieCategorieFournisseursUsingGET1(categorieFournisseurId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingGET1(categorieFournisseurId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingGET1(categorieFournisseurId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieFournisseurId === null || categorieFournisseurId === undefined) {
            throw new Error('Required parameter categorieFournisseurId was null or undefined when calling categorieCategorieFournisseursUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCategorieFournisseur>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs/${encodeURIComponent(String(categorieFournisseurId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieFournisseur>;
    public categorieCategorieFournisseursUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieFournisseursUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCategorieFournisseur>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieFournisseur>;
    public categorieCategorieFournisseursUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieFournisseursUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCategorieFournisseur>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_fournisseurs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieFournisseursUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieFournisseur>;
    public categorieCategorieFournisseursUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieFournisseur>>;
    public categorieCategorieFournisseursUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieFournisseursUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieFournisseursUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCategorieFournisseur>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_fournisseurs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param categorieMemberId categorie_memberId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingDELETE(categorieMemberId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieMembersUsingDELETE(categorieMemberId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieMembersUsingDELETE(categorieMemberId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieMembersUsingDELETE(categorieMemberId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieMemberId === null || categorieMemberId === undefined) {
            throw new Error('Required parameter categorieMemberId was null or undefined when calling categorieCategorieMembersUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members/${encodeURIComponent(String(categorieMemberId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieMembersUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieMembersUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieMembersUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieMember>;
    public categorieCategorieMembersUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCategorieMember>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param categorieMemberId categorie_memberId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingGET1(categorieMemberId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorieMember>;
    public categorieCategorieMembersUsingGET1(categorieMemberId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorieMember>>;
    public categorieCategorieMembersUsingGET1(categorieMemberId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorieMember>>;
    public categorieCategorieMembersUsingGET1(categorieMemberId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieMemberId === null || categorieMemberId === undefined) {
            throw new Error('Required parameter categorieMemberId was null or undefined when calling categorieCategorieMembersUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCategorieMember>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members/${encodeURIComponent(String(categorieMemberId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieMember>;
    public categorieCategorieMembersUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieMembersUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCategorieMember>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieMember>;
    public categorieCategorieMembersUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieMembersUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCategorieMember>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_members
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieMembersUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieMember>;
    public categorieCategorieMembersUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieMember>>;
    public categorieCategorieMembersUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieMembersUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieMembersUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCategorieMember>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_members`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param categorieProductId categorie_productId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingDELETE(categorieProductId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieProductsUsingDELETE(categorieProductId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieProductsUsingDELETE(categorieProductId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieProductsUsingDELETE(categorieProductId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieProductId === null || categorieProductId === undefined) {
            throw new Error('Required parameter categorieProductId was null or undefined when calling categorieCategorieProductsUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products/${encodeURIComponent(String(categorieProductId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieProductsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieProductsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieProductsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieProduct>;
    public categorieCategorieProductsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCategorieProduct>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param categorieProductId categorie_productId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingGET1(categorieProductId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorieProduct>;
    public categorieCategorieProductsUsingGET1(categorieProductId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorieProduct>>;
    public categorieCategorieProductsUsingGET1(categorieProductId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorieProduct>>;
    public categorieCategorieProductsUsingGET1(categorieProductId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieProductId === null || categorieProductId === undefined) {
            throw new Error('Required parameter categorieProductId was null or undefined when calling categorieCategorieProductsUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCategorieProduct>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products/${encodeURIComponent(String(categorieProductId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieProduct>;
    public categorieCategorieProductsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieProductsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCategorieProduct>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieProduct>;
    public categorieCategorieProductsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieProductsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCategorieProduct>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_products
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieProductsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieProduct>;
    public categorieCategorieProductsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieProduct>>;
    public categorieCategorieProductsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieProductsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieProductsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCategorieProduct>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_products`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param categorieSocieteId categorie_societeId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingDELETE(categorieSocieteId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieSocietesUsingDELETE(categorieSocieteId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieSocietesUsingDELETE(categorieSocieteId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieSocietesUsingDELETE(categorieSocieteId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieSocieteId === null || categorieSocieteId === undefined) {
            throw new Error('Required parameter categorieSocieteId was null or undefined when calling categorieCategorieSocietesUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes/${encodeURIComponent(String(categorieSocieteId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public categorieCategorieSocietesUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public categorieCategorieSocietesUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public categorieCategorieSocietesUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieSociete>;
    public categorieCategorieSocietesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCategorieSociete>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param categorieSocieteId categorie_societeId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingGET1(categorieSocieteId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorieSociete>;
    public categorieCategorieSocietesUsingGET1(categorieSocieteId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorieSociete>>;
    public categorieCategorieSocietesUsingGET1(categorieSocieteId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorieSociete>>;
    public categorieCategorieSocietesUsingGET1(categorieSocieteId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categorieSocieteId === null || categorieSocieteId === undefined) {
            throw new Error('Required parameter categorieSocieteId was null or undefined when calling categorieCategorieSocietesUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCategorieSociete>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes/${encodeURIComponent(String(categorieSocieteId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieSociete>;
    public categorieCategorieSocietesUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieSocietesUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCategorieSociete>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieSociete>;
    public categorieCategorieSocietesUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieSocietesUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCategorieSociete>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * categorieCategorie_societes
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categorieCategorieSocietesUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorieSociete>;
    public categorieCategorieSocietesUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorieSociete>>;
    public categorieCategorieSocietesUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categorieCategorieSocietesUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling categorieCategorieSocietesUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCategorieSociete>(`${this.basePath}/categories/${encodeURIComponent(String(id))}/categorie_societes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteCategorie
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCategorieUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCategorieUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCategorieUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCategorieUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCategorieUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/categories/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllCategorie
     * 
     * @param page page
     * @param size size
     * @param sort sort
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllCategorieUsingGET(page?: number, size?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCategorie>;
    public findAllCategorieUsingGET(page?: number, size?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCategorie>>;
    public findAllCategorieUsingGET(page?: number, size?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCategorie>>;
    public findAllCategorieUsingGET(page?: number, size?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json',
            'application/json',
            'application/x-spring-data-compact+json',
            'text/uri-list'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCategorie>(`${this.basePath}/categories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByIdCategorie
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdCategorieUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorie>;
    public findByIdCategorieUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorie>>;
    public findByIdCategorieUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorie>>;
    public findByIdCategorieUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findByIdCategorieUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EntityModelCategorie>(`${this.basePath}/categories/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCategorie
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCategorieUsingPATCH(body: Categorie, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorie>;
    public saveCategorieUsingPATCH(body: Categorie, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorie>>;
    public saveCategorieUsingPATCH(body: Categorie, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorie>>;
    public saveCategorieUsingPATCH(body: Categorie, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCategorieUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveCategorieUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<EntityModelCategorie>(`${this.basePath}/categories/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCategorie
     * 
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCategorieUsingPOST(body: Categorie, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorie>;
    public saveCategorieUsingPOST(body: Categorie, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorie>>;
    public saveCategorieUsingPOST(body: Categorie, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorie>>;
    public saveCategorieUsingPOST(body: Categorie, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCategorieUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EntityModelCategorie>(`${this.basePath}/categories`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCategorie
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCategorieUsingPUT(body: Categorie, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCategorie>;
    public saveCategorieUsingPUT(body: Categorie, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCategorie>>;
    public saveCategorieUsingPUT(body: Categorie, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCategorie>>;
    public saveCategorieUsingPUT(body: Categorie, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCategorieUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveCategorieUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<EntityModelCategorie>(`${this.basePath}/categories/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
