/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CanUser } from '../model/canUser';
import { CollectionModelCanUser } from '../model/collectionModelCanUser';
import { CollectionModelCommandeFournisseurLog } from '../model/collectionModelCommandeFournisseurLog';
import { CollectionModelProductFournisseurPrice } from '../model/collectionModelProductFournisseurPrice';
import { CollectionModelProductFournisseurPriceLog } from '../model/collectionModelProductFournisseurPriceLog';
import { CollectionModelUserRights } from '../model/collectionModelUserRights';
import { CollectionModelUsergroupUser } from '../model/collectionModelUsergroupUser';
import { EntityModelCanUser } from '../model/entityModelCanUser';
import { EntityModelCommandeFournisseurLog } from '../model/entityModelCommandeFournisseurLog';
import { EntityModelProductFournisseurPrice } from '../model/entityModelProductFournisseurPrice';
import { EntityModelProductFournisseurPriceLog } from '../model/entityModelProductFournisseurPriceLog';
import { EntityModelUserParam } from '../model/entityModelUserParam';
import { EntityModelUserRights } from '../model/entityModelUserRights';
import { EntityModelUsergroupUser } from '../model/entityModelUsergroupUser';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CanUserEntityService {

    protected basePath = 'https://localhost:8005';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param commandeFournisseurLogId commande_fournisseur_logId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandeFournisseurLogId === null || commandeFournisseurLogId === undefined) {
            throw new Error('Required parameter commandeFournisseurLogId was null or undefined when calling canUserCommandeFournisseurLogsUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs/${encodeURIComponent(String(commandeFournisseurLogId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserCommandeFournisseurLogsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserCommandeFournisseurLogsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserCommandeFournisseurLogsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public canUserCommandeFournisseurLogsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCommandeFournisseurLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param commandeFournisseurLogId commande_fournisseur_logId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommandeFournisseurLog>;
    public canUserCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandeFournisseurLogId === null || commandeFournisseurLogId === undefined) {
            throw new Error('Required parameter commandeFournisseurLogId was null or undefined when calling canUserCommandeFournisseurLogsUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCommandeFournisseurLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs/${encodeURIComponent(String(commandeFournisseurLogId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public canUserCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserCommandeFournisseurLogsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCommandeFournisseurLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public canUserCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserCommandeFournisseurLogsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCommandeFournisseurLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserCommande_fournisseur_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public canUserCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public canUserCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserCommandeFournisseurLogsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserCommandeFournisseurLogsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCommandeFournisseurLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param id id
     * @param productFournisseurPriceLogId product_fournisseur_price_logId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingDELETE(id: number, productFournisseurPriceLogId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserProductFournisseurPriceLogsUsingDELETE(id: number, productFournisseurPriceLogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserProductFournisseurPriceLogsUsingDELETE(id: number, productFournisseurPriceLogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserProductFournisseurPriceLogsUsingDELETE(id: number, productFournisseurPriceLogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingDELETE.');
        }

        if (productFournisseurPriceLogId === null || productFournisseurPriceLogId === undefined) {
            throw new Error('Required parameter productFournisseurPriceLogId was null or undefined when calling canUserProductFournisseurPriceLogsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs/${encodeURIComponent(String(productFournisseurPriceLogId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserProductFournisseurPriceLogsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserProductFournisseurPriceLogsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserProductFournisseurPriceLogsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPriceLog>;
    public canUserProductFournisseurPriceLogsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelProductFournisseurPriceLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param id id
     * @param productFournisseurPriceLogId product_fournisseur_price_logId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingGET1(id: number, productFournisseurPriceLogId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelProductFournisseurPriceLog>;
    public canUserProductFournisseurPriceLogsUsingGET1(id: number, productFournisseurPriceLogId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingGET1(id: number, productFournisseurPriceLogId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingGET1(id: number, productFournisseurPriceLogId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingGET1.');
        }

        if (productFournisseurPriceLogId === null || productFournisseurPriceLogId === undefined) {
            throw new Error('Required parameter productFournisseurPriceLogId was null or undefined when calling canUserProductFournisseurPriceLogsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelProductFournisseurPriceLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs/${encodeURIComponent(String(productFournisseurPriceLogId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPriceLog>;
    public canUserProductFournisseurPriceLogsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserProductFournisseurPriceLogsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelProductFournisseurPriceLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPriceLog>;
    public canUserProductFournisseurPriceLogsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserProductFournisseurPriceLogsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelProductFournisseurPriceLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_price_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPriceLogsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPriceLog>;
    public canUserProductFournisseurPriceLogsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPriceLog>>;
    public canUserProductFournisseurPriceLogsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserProductFournisseurPriceLogsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPriceLogsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelProductFournisseurPriceLog>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_price_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param id id
     * @param productFournisseurPriceId product_fournisseur_priceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingDELETE(id: number, productFournisseurPriceId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserProductFournisseurPricesUsingDELETE(id: number, productFournisseurPriceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserProductFournisseurPricesUsingDELETE(id: number, productFournisseurPriceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserProductFournisseurPricesUsingDELETE(id: number, productFournisseurPriceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingDELETE.');
        }

        if (productFournisseurPriceId === null || productFournisseurPriceId === undefined) {
            throw new Error('Required parameter productFournisseurPriceId was null or undefined when calling canUserProductFournisseurPricesUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices/${encodeURIComponent(String(productFournisseurPriceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserProductFournisseurPricesUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserProductFournisseurPricesUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserProductFournisseurPricesUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPrice>;
    public canUserProductFournisseurPricesUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelProductFournisseurPrice>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param id id
     * @param productFournisseurPriceId product_fournisseur_priceId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingGET1(id: number, productFournisseurPriceId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelProductFournisseurPrice>;
    public canUserProductFournisseurPricesUsingGET1(id: number, productFournisseurPriceId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingGET1(id: number, productFournisseurPriceId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingGET1(id: number, productFournisseurPriceId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingGET1.');
        }

        if (productFournisseurPriceId === null || productFournisseurPriceId === undefined) {
            throw new Error('Required parameter productFournisseurPriceId was null or undefined when calling canUserProductFournisseurPricesUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelProductFournisseurPrice>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices/${encodeURIComponent(String(productFournisseurPriceId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPrice>;
    public canUserProductFournisseurPricesUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserProductFournisseurPricesUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelProductFournisseurPrice>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPrice>;
    public canUserProductFournisseurPricesUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserProductFournisseurPricesUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelProductFournisseurPrice>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserProduct_fournisseur_prices
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserProductFournisseurPricesUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelProductFournisseurPrice>;
    public canUserProductFournisseurPricesUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelProductFournisseurPrice>>;
    public canUserProductFournisseurPricesUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserProductFournisseurPricesUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserProductFournisseurPricesUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelProductFournisseurPrice>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/product_fournisseur_prices`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_param
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserParamUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserUserParamUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserUserParamUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserUserParamUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserParamUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_param`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_param
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserParamUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelUserParam>;
    public canUserUserParamUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelUserParam>>;
    public canUserUserParamUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelUserParam>>;
    public canUserUserParamUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserParamUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EntityModelUserParam>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_param`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_param
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserParamUsingPATCH(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelUserParam>;
    public canUserUserParamUsingPATCH(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelUserParam>>;
    public canUserUserParamUsingPATCH(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelUserParam>>;
    public canUserUserParamUsingPATCH(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUserParamUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserParamUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<EntityModelUserParam>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_param`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_param
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserParamUsingPOST(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelUserParam>;
    public canUserUserParamUsingPOST(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelUserParam>>;
    public canUserUserParamUsingPOST(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelUserParam>>;
    public canUserUserParamUsingPOST(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUserParamUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserParamUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EntityModelUserParam>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_param`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_param
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserParamUsingPUT(body: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelUserParam>;
    public canUserUserParamUsingPUT(body: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelUserParam>>;
    public canUserUserParamUsingPUT(body: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelUserParam>>;
    public canUserUserParamUsingPUT(body: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUserParamUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserParamUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<EntityModelUserParam>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_param`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param id id
     * @param userRightsId user_rightsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingDELETE(id: number, userRightsId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserUserRightsUsingDELETE(id: number, userRightsId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserUserRightsUsingDELETE(id: number, userRightsId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserUserRightsUsingDELETE(id: number, userRightsId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingDELETE.');
        }

        if (userRightsId === null || userRightsId === undefined) {
            throw new Error('Required parameter userRightsId was null or undefined when calling canUserUserRightsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights/${encodeURIComponent(String(userRightsId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserUserRightsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserUserRightsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserUserRightsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUserRights>;
    public canUserUserRightsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUserRights>>;
    public canUserUserRightsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUserRights>>;
    public canUserUserRightsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelUserRights>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param id id
     * @param userRightsId user_rightsId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingGET1(id: number, userRightsId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelUserRights>;
    public canUserUserRightsUsingGET1(id: number, userRightsId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelUserRights>>;
    public canUserUserRightsUsingGET1(id: number, userRightsId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelUserRights>>;
    public canUserUserRightsUsingGET1(id: number, userRightsId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingGET1.');
        }

        if (userRightsId === null || userRightsId === undefined) {
            throw new Error('Required parameter userRightsId was null or undefined when calling canUserUserRightsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelUserRights>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights/${encodeURIComponent(String(userRightsId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUserRights>;
    public canUserUserRightsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUserRights>>;
    public canUserUserRightsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUserRights>>;
    public canUserUserRightsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUserRightsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelUserRights>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUserRights>;
    public canUserUserRightsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUserRights>>;
    public canUserUserRightsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUserRights>>;
    public canUserUserRightsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUserRightsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelUserRights>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUser_rights
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUserRightsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUserRights>;
    public canUserUserRightsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUserRights>>;
    public canUserUserRightsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUserRights>>;
    public canUserUserRightsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUserRightsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUserRightsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelUserRights>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/user_rights`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param id id
     * @param usergroupUserId usergroup_userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingDELETE(id: number, usergroupUserId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserUsergroupUsersUsingDELETE(id: number, usergroupUserId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserUsergroupUsersUsingDELETE(id: number, usergroupUserId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserUsergroupUsersUsingDELETE(id: number, usergroupUserId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingDELETE.');
        }

        if (usergroupUserId === null || usergroupUserId === undefined) {
            throw new Error('Required parameter usergroupUserId was null or undefined when calling canUserUsergroupUsersUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users/${encodeURIComponent(String(usergroupUserId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public canUserUsergroupUsersUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public canUserUsergroupUsersUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public canUserUsergroupUsersUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUsergroupUser>;
    public canUserUsergroupUsersUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelUsergroupUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param id id
     * @param usergroupUserId usergroup_userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingGET1(id: number, usergroupUserId: string, observe?: 'body', reportProgress?: boolean): Observable<EntityModelUsergroupUser>;
    public canUserUsergroupUsersUsingGET1(id: number, usergroupUserId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelUsergroupUser>>;
    public canUserUsergroupUsersUsingGET1(id: number, usergroupUserId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelUsergroupUser>>;
    public canUserUsergroupUsersUsingGET1(id: number, usergroupUserId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingGET1.');
        }

        if (usergroupUserId === null || usergroupUserId === undefined) {
            throw new Error('Required parameter usergroupUserId was null or undefined when calling canUserUsergroupUsersUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelUsergroupUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users/${encodeURIComponent(String(usergroupUserId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUsergroupUser>;
    public canUserUsergroupUsersUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUsergroupUsersUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelUsergroupUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUsergroupUser>;
    public canUserUsergroupUsersUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUsergroupUsersUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelUsergroupUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canUserUsergroup_users
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canUserUsergroupUsersUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelUsergroupUser>;
    public canUserUsergroupUsersUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelUsergroupUser>>;
    public canUserUsergroupUsersUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling canUserUsergroupUsersUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling canUserUsergroupUsersUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelUsergroupUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}/usergroup_users`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteCanUser
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCanUserUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCanUserUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCanUserUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCanUserUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCanUserUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllCanUser
     * 
     * @param page page
     * @param size size
     * @param sort sort
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllCanUserUsingGET(page?: number, size?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCanUser>;
    public findAllCanUserUsingGET(page?: number, size?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCanUser>>;
    public findAllCanUserUsingGET(page?: number, size?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCanUser>>;
    public findAllCanUserUsingGET(page?: number, size?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json',
            'application/json',
            'application/x-spring-data-compact+json',
            'text/uri-list'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCanUser>(`${this.basePath}/canUsers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByIdCanUser
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdCanUserUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCanUser>;
    public findByIdCanUserUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCanUser>>;
    public findByIdCanUserUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCanUser>>;
    public findByIdCanUserUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findByIdCanUserUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EntityModelCanUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCanUser
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCanUserUsingPATCH(body: CanUser, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCanUser>;
    public saveCanUserUsingPATCH(body: CanUser, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCanUser>>;
    public saveCanUserUsingPATCH(body: CanUser, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCanUser>>;
    public saveCanUserUsingPATCH(body: CanUser, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCanUserUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveCanUserUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<EntityModelCanUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCanUser
     * 
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCanUserUsingPOST(body: CanUser, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCanUser>;
    public saveCanUserUsingPOST(body: CanUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCanUser>>;
    public saveCanUserUsingPOST(body: CanUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCanUser>>;
    public saveCanUserUsingPOST(body: CanUser, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCanUserUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EntityModelCanUser>(`${this.basePath}/canUsers`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCanUser
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCanUserUsingPUT(body: CanUser, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCanUser>;
    public saveCanUserUsingPUT(body: CanUser, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCanUser>>;
    public saveCanUserUsingPUT(body: CanUser, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCanUser>>;
    public saveCanUserUsingPUT(body: CanUser, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCanUserUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveCanUserUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<EntityModelCanUser>(`${this.basePath}/canUsers/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
