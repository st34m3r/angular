/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ModelAndView } from '../model/modelAndView';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BasicErrorControllerService {

    protected basePath = 'https://localhost:8005';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingDELETE(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingDELETE(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingDELETE(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingDELETE(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<ModelAndView>(`${this.basePath}/error`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingGET(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingGET(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingGET(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingGET(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ModelAndView>(`${this.basePath}/error`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingHEAD(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingHEAD(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingHEAD(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingHEAD(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.head<ModelAndView>(`${this.basePath}/error`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingOPTIONS(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingOPTIONS(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingOPTIONS(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingOPTIONS(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.options<ModelAndView>(`${this.basePath}/error`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingPATCH(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingPATCH(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingPATCH(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingPATCH(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<ModelAndView>(`${this.basePath}/error`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingPOST(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingPOST(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingPOST(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingPOST(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<ModelAndView>(`${this.basePath}/error`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errorHtml
     * 
     * @param authType 
     * @param contextPath 
     * @param cookies0Comment 
     * @param cookies0Domain 
     * @param cookies0HttpOnly 
     * @param cookies0MaxAge 
     * @param cookies0Name 
     * @param cookies0Path 
     * @param cookies0Secure 
     * @param cookies0Value 
     * @param cookies0Version 
     * @param headerNames 
     * @param httpServletMappingMappingMatch 
     * @param httpServletMappingMatchValue 
     * @param httpServletMappingPattern 
     * @param httpServletMappingServletName 
     * @param method 
     * @param parts0ContentType 
     * @param parts0HeaderNames 
     * @param parts0Name 
     * @param parts0Size 
     * @param parts0SubmittedFileName 
     * @param pathInfo 
     * @param pathTranslated 
     * @param queryString 
     * @param remoteUser 
     * @param requestedSessionId 
     * @param requestedSessionIdFromCookie 
     * @param requestedSessionIdFromURL 
     * @param requestedSessionIdValid 
     * @param requestURI 
     * @param requestURL 
     * @param servletPath 
     * @param sessionCreationTime 
     * @param sessionId 
     * @param sessionLastAccessedTime 
     * @param sessionMaxInactiveInterval 
     * @param sessionNew 
     * @param sessionServletContextClassLoader 
     * @param sessionServletContextContextPath 
     * @param sessionServletContextDefaultSessionTrackingModes 
     * @param sessionServletContextEffectiveMajorVersion 
     * @param sessionServletContextEffectiveMinorVersion 
     * @param sessionServletContextEffectiveSessionTrackingModes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces 
     * @param sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation 
     * @param sessionServletContextJspConfigDescriptorTaglibs0TaglibURI 
     * @param sessionServletContextMajorVersion 
     * @param sessionServletContextMinorVersion 
     * @param sessionServletContextRequestCharacterEncoding 
     * @param sessionServletContextResponseCharacterEncoding 
     * @param sessionServletContextServerInfo 
     * @param sessionServletContextServletContextName 
     * @param sessionServletContextSessionCookieConfigComment 
     * @param sessionServletContextSessionCookieConfigDomain 
     * @param sessionServletContextSessionCookieConfigHttpOnly 
     * @param sessionServletContextSessionCookieConfigMaxAge 
     * @param sessionServletContextSessionCookieConfigName 
     * @param sessionServletContextSessionCookieConfigPath 
     * @param sessionServletContextSessionCookieConfigSecure 
     * @param sessionServletContextSessionTimeout 
     * @param sessionServletContextVirtualServerName 
     * @param sessionValueNames 
     * @param status 
     * @param trailerFieldsReady 
     * @param userPrincipalName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorHtmlUsingPUT(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'body', reportProgress?: boolean): Observable<ModelAndView>;
    public errorHtmlUsingPUT(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelAndView>>;
    public errorHtmlUsingPUT(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelAndView>>;
    public errorHtmlUsingPUT(authType?: string, contextPath?: string, cookies0Comment?: string, cookies0Domain?: string, cookies0HttpOnly?: boolean, cookies0MaxAge?: number, cookies0Name?: string, cookies0Path?: string, cookies0Secure?: boolean, cookies0Value?: string, cookies0Version?: number, headerNames?: Array<string>, httpServletMappingMappingMatch?: 'CONTEXT_ROOT' | 'DEFAULT' | 'EXACT' | 'EXTENSION' | 'PATH', httpServletMappingMatchValue?: string, httpServletMappingPattern?: string, httpServletMappingServletName?: string, method?: string, parts0ContentType?: string, parts0HeaderNames?: Array<string>, parts0Name?: string, parts0Size?: number, parts0SubmittedFileName?: string, pathInfo?: string, pathTranslated?: string, queryString?: string, remoteUser?: string, requestedSessionId?: string, requestedSessionIdFromCookie?: boolean, requestedSessionIdFromURL?: boolean, requestedSessionIdValid?: boolean, requestURI?: string, requestURL?: string, servletPath?: string, sessionCreationTime?: number, sessionId?: string, sessionLastAccessedTime?: number, sessionMaxInactiveInterval?: number, sessionNew?: boolean, sessionServletContextClassLoader?: string, sessionServletContextContextPath?: string, sessionServletContextDefaultSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextEffectiveMajorVersion?: number, sessionServletContextEffectiveMinorVersion?: number, sessionServletContextEffectiveSessionTrackingModes?: Array<'COOKIE' | 'SSL' | 'URL'>, sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes?: Array<string>, sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces?: string, sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns?: Array<string>, sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation?: string, sessionServletContextJspConfigDescriptorTaglibs0TaglibURI?: string, sessionServletContextMajorVersion?: number, sessionServletContextMinorVersion?: number, sessionServletContextRequestCharacterEncoding?: string, sessionServletContextResponseCharacterEncoding?: string, sessionServletContextServerInfo?: string, sessionServletContextServletContextName?: string, sessionServletContextSessionCookieConfigComment?: string, sessionServletContextSessionCookieConfigDomain?: string, sessionServletContextSessionCookieConfigHttpOnly?: boolean, sessionServletContextSessionCookieConfigMaxAge?: number, sessionServletContextSessionCookieConfigName?: string, sessionServletContextSessionCookieConfigPath?: string, sessionServletContextSessionCookieConfigSecure?: boolean, sessionServletContextSessionTimeout?: number, sessionServletContextVirtualServerName?: string, sessionValueNames?: Array<string>, status?: number, trailerFieldsReady?: boolean, userPrincipalName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














































































        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (authType !== undefined && authType !== null) {
            queryParameters = queryParameters.set('authType', <any>authType);
        }
        if (contextPath !== undefined && contextPath !== null) {
            queryParameters = queryParameters.set('contextPath', <any>contextPath);
        }
        if (cookies0Comment !== undefined && cookies0Comment !== null) {
            queryParameters = queryParameters.set('cookies[0].comment', <any>cookies0Comment);
        }
        if (cookies0Domain !== undefined && cookies0Domain !== null) {
            queryParameters = queryParameters.set('cookies[0].domain', <any>cookies0Domain);
        }
        if (cookies0HttpOnly !== undefined && cookies0HttpOnly !== null) {
            queryParameters = queryParameters.set('cookies[0].httpOnly', <any>cookies0HttpOnly);
        }
        if (cookies0MaxAge !== undefined && cookies0MaxAge !== null) {
            queryParameters = queryParameters.set('cookies[0].maxAge', <any>cookies0MaxAge);
        }
        if (cookies0Name !== undefined && cookies0Name !== null) {
            queryParameters = queryParameters.set('cookies[0].name', <any>cookies0Name);
        }
        if (cookies0Path !== undefined && cookies0Path !== null) {
            queryParameters = queryParameters.set('cookies[0].path', <any>cookies0Path);
        }
        if (cookies0Secure !== undefined && cookies0Secure !== null) {
            queryParameters = queryParameters.set('cookies[0].secure', <any>cookies0Secure);
        }
        if (cookies0Value !== undefined && cookies0Value !== null) {
            queryParameters = queryParameters.set('cookies[0].value', <any>cookies0Value);
        }
        if (cookies0Version !== undefined && cookies0Version !== null) {
            queryParameters = queryParameters.set('cookies[0].version', <any>cookies0Version);
        }
        if (headerNames) {
            queryParameters = queryParameters.set('headerNames', headerNames.join(COLLECTION_FORMATS['csv']));
        }
        if (httpServletMappingMappingMatch !== undefined && httpServletMappingMappingMatch !== null) {
            queryParameters = queryParameters.set('httpServletMapping.mappingMatch', <any>httpServletMappingMappingMatch);
        }
        if (httpServletMappingMatchValue !== undefined && httpServletMappingMatchValue !== null) {
            queryParameters = queryParameters.set('httpServletMapping.matchValue', <any>httpServletMappingMatchValue);
        }
        if (httpServletMappingPattern !== undefined && httpServletMappingPattern !== null) {
            queryParameters = queryParameters.set('httpServletMapping.pattern', <any>httpServletMappingPattern);
        }
        if (httpServletMappingServletName !== undefined && httpServletMappingServletName !== null) {
            queryParameters = queryParameters.set('httpServletMapping.servletName', <any>httpServletMappingServletName);
        }
        if (method !== undefined && method !== null) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (parts0ContentType !== undefined && parts0ContentType !== null) {
            queryParameters = queryParameters.set('parts[0].contentType', <any>parts0ContentType);
        }
        if (parts0HeaderNames) {
            queryParameters = queryParameters.set('parts[0].headerNames', parts0HeaderNames.join(COLLECTION_FORMATS['csv']));
        }
        if (parts0Name !== undefined && parts0Name !== null) {
            queryParameters = queryParameters.set('parts[0].name', <any>parts0Name);
        }
        if (parts0Size !== undefined && parts0Size !== null) {
            queryParameters = queryParameters.set('parts[0].size', <any>parts0Size);
        }
        if (parts0SubmittedFileName !== undefined && parts0SubmittedFileName !== null) {
            queryParameters = queryParameters.set('parts[0].submittedFileName', <any>parts0SubmittedFileName);
        }
        if (pathInfo !== undefined && pathInfo !== null) {
            queryParameters = queryParameters.set('pathInfo', <any>pathInfo);
        }
        if (pathTranslated !== undefined && pathTranslated !== null) {
            queryParameters = queryParameters.set('pathTranslated', <any>pathTranslated);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }
        if (remoteUser !== undefined && remoteUser !== null) {
            queryParameters = queryParameters.set('remoteUser', <any>remoteUser);
        }
        if (requestedSessionId !== undefined && requestedSessionId !== null) {
            queryParameters = queryParameters.set('requestedSessionId', <any>requestedSessionId);
        }
        if (requestedSessionIdFromCookie !== undefined && requestedSessionIdFromCookie !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromCookie', <any>requestedSessionIdFromCookie);
        }
        if (requestedSessionIdFromURL !== undefined && requestedSessionIdFromURL !== null) {
            queryParameters = queryParameters.set('requestedSessionIdFromURL', <any>requestedSessionIdFromURL);
        }
        if (requestedSessionIdValid !== undefined && requestedSessionIdValid !== null) {
            queryParameters = queryParameters.set('requestedSessionIdValid', <any>requestedSessionIdValid);
        }
        if (requestURI !== undefined && requestURI !== null) {
            queryParameters = queryParameters.set('requestURI', <any>requestURI);
        }
        if (requestURL !== undefined && requestURL !== null) {
            queryParameters = queryParameters.set('requestURL', <any>requestURL);
        }
        if (servletPath !== undefined && servletPath !== null) {
            queryParameters = queryParameters.set('servletPath', <any>servletPath);
        }
        if (sessionCreationTime !== undefined && sessionCreationTime !== null) {
            queryParameters = queryParameters.set('session.creationTime', <any>sessionCreationTime);
        }
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('session.id', <any>sessionId);
        }
        if (sessionLastAccessedTime !== undefined && sessionLastAccessedTime !== null) {
            queryParameters = queryParameters.set('session.lastAccessedTime', <any>sessionLastAccessedTime);
        }
        if (sessionMaxInactiveInterval !== undefined && sessionMaxInactiveInterval !== null) {
            queryParameters = queryParameters.set('session.maxInactiveInterval', <any>sessionMaxInactiveInterval);
        }
        if (sessionNew !== undefined && sessionNew !== null) {
            queryParameters = queryParameters.set('session.new', <any>sessionNew);
        }
        if (sessionServletContextClassLoader !== undefined && sessionServletContextClassLoader !== null) {
            queryParameters = queryParameters.set('session.servletContext.classLoader', <any>sessionServletContextClassLoader);
        }
        if (sessionServletContextContextPath !== undefined && sessionServletContextContextPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.contextPath', <any>sessionServletContextContextPath);
        }
        if (sessionServletContextDefaultSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.defaultSessionTrackingModes', sessionServletContextDefaultSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextEffectiveMajorVersion !== undefined && sessionServletContextEffectiveMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMajorVersion', <any>sessionServletContextEffectiveMajorVersion);
        }
        if (sessionServletContextEffectiveMinorVersion !== undefined && sessionServletContextEffectiveMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.effectiveMinorVersion', <any>sessionServletContextEffectiveMinorVersion);
        }
        if (sessionServletContextEffectiveSessionTrackingModes) {
            queryParameters = queryParameters.set('session.servletContext.effectiveSessionTrackingModes', sessionServletContextEffectiveSessionTrackingModes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].buffer', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0Buffer);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].defaultContentType', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DefaultContentType);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].deferredSyntaxAllowedAsLiteral', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0DeferredSyntaxAllowedAsLiteral);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].elIgnored', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ElIgnored);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].errorOnUndeclaredNamespace', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ErrorOnUndeclaredNamespace);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includeCodas', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludeCodas.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].includePreludes', sessionServletContextJspConfigDescriptorJspPropertyGroups0IncludePreludes.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].isXml', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0IsXml);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].pageEncoding', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0PageEncoding);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].scriptingInvalid', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0ScriptingInvalid);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== undefined && sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].trimDirectiveWhitespaces', <any>sessionServletContextJspConfigDescriptorJspPropertyGroups0TrimDirectiveWhitespaces);
        }
        if (sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.jspPropertyGroups[0].urlPatterns', sessionServletContextJspConfigDescriptorJspPropertyGroups0UrlPatterns.join(COLLECTION_FORMATS['csv']));
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibLocation', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibLocation);
        }
        if (sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== undefined && sessionServletContextJspConfigDescriptorTaglibs0TaglibURI !== null) {
            queryParameters = queryParameters.set('session.servletContext.jspConfigDescriptor.taglibs[0].taglibURI', <any>sessionServletContextJspConfigDescriptorTaglibs0TaglibURI);
        }
        if (sessionServletContextMajorVersion !== undefined && sessionServletContextMajorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.majorVersion', <any>sessionServletContextMajorVersion);
        }
        if (sessionServletContextMinorVersion !== undefined && sessionServletContextMinorVersion !== null) {
            queryParameters = queryParameters.set('session.servletContext.minorVersion', <any>sessionServletContextMinorVersion);
        }
        if (sessionServletContextRequestCharacterEncoding !== undefined && sessionServletContextRequestCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.requestCharacterEncoding', <any>sessionServletContextRequestCharacterEncoding);
        }
        if (sessionServletContextResponseCharacterEncoding !== undefined && sessionServletContextResponseCharacterEncoding !== null) {
            queryParameters = queryParameters.set('session.servletContext.responseCharacterEncoding', <any>sessionServletContextResponseCharacterEncoding);
        }
        if (sessionServletContextServerInfo !== undefined && sessionServletContextServerInfo !== null) {
            queryParameters = queryParameters.set('session.servletContext.serverInfo', <any>sessionServletContextServerInfo);
        }
        if (sessionServletContextServletContextName !== undefined && sessionServletContextServletContextName !== null) {
            queryParameters = queryParameters.set('session.servletContext.servletContextName', <any>sessionServletContextServletContextName);
        }
        if (sessionServletContextSessionCookieConfigComment !== undefined && sessionServletContextSessionCookieConfigComment !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.comment', <any>sessionServletContextSessionCookieConfigComment);
        }
        if (sessionServletContextSessionCookieConfigDomain !== undefined && sessionServletContextSessionCookieConfigDomain !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.domain', <any>sessionServletContextSessionCookieConfigDomain);
        }
        if (sessionServletContextSessionCookieConfigHttpOnly !== undefined && sessionServletContextSessionCookieConfigHttpOnly !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.httpOnly', <any>sessionServletContextSessionCookieConfigHttpOnly);
        }
        if (sessionServletContextSessionCookieConfigMaxAge !== undefined && sessionServletContextSessionCookieConfigMaxAge !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.maxAge', <any>sessionServletContextSessionCookieConfigMaxAge);
        }
        if (sessionServletContextSessionCookieConfigName !== undefined && sessionServletContextSessionCookieConfigName !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.name', <any>sessionServletContextSessionCookieConfigName);
        }
        if (sessionServletContextSessionCookieConfigPath !== undefined && sessionServletContextSessionCookieConfigPath !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.path', <any>sessionServletContextSessionCookieConfigPath);
        }
        if (sessionServletContextSessionCookieConfigSecure !== undefined && sessionServletContextSessionCookieConfigSecure !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionCookieConfig.secure', <any>sessionServletContextSessionCookieConfigSecure);
        }
        if (sessionServletContextSessionTimeout !== undefined && sessionServletContextSessionTimeout !== null) {
            queryParameters = queryParameters.set('session.servletContext.sessionTimeout', <any>sessionServletContextSessionTimeout);
        }
        if (sessionServletContextVirtualServerName !== undefined && sessionServletContextVirtualServerName !== null) {
            queryParameters = queryParameters.set('session.servletContext.virtualServerName', <any>sessionServletContextVirtualServerName);
        }
        if (sessionValueNames) {
            queryParameters = queryParameters.set('session.valueNames', sessionValueNames.join(COLLECTION_FORMATS['csv']));
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (trailerFieldsReady !== undefined && trailerFieldsReady !== null) {
            queryParameters = queryParameters.set('trailerFieldsReady', <any>trailerFieldsReady);
        }
        if (userPrincipalName !== undefined && userPrincipalName !== null) {
            queryParameters = queryParameters.set('userPrincipal.name', <any>userPrincipalName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/html'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<ModelAndView>(`${this.basePath}/error`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
