/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CollectionModelCommande } from '../model/collectionModelCommande';
import { CollectionModelCommandeFournisseurLog } from '../model/collectionModelCommandeFournisseurLog';
import { CollectionModelCommandeFournisseurdet } from '../model/collectionModelCommandeFournisseurdet';
import { CollectionModelCommandedet } from '../model/collectionModelCommandedet';
import { Commande } from '../model/commande';
import { EntityModelCommande } from '../model/entityModelCommande';
import { EntityModelCommandeFournisseurLog } from '../model/entityModelCommandeFournisseurLog';
import { EntityModelCommandeFournisseurdet } from '../model/entityModelCommandeFournisseurdet';
import { EntityModelCommandedet } from '../model/entityModelCommandedet';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CommandeEntityService {

    protected basePath = 'https://localhost:8005';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param commandeFournisseurLogId commande_fournisseur_logId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public commandeCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public commandeCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public commandeCommandeFournisseurLogsUsingDELETE(commandeFournisseurLogId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandeFournisseurLogId === null || commandeFournisseurLogId === undefined) {
            throw new Error('Required parameter commandeFournisseurLogId was null or undefined when calling commandeCommandeFournisseurLogsUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs/${encodeURIComponent(String(commandeFournisseurLogId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public commandeCommandeFournisseurLogsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public commandeCommandeFournisseurLogsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public commandeCommandeFournisseurLogsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public commandeCommandeFournisseurLogsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCommandeFournisseurLog>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param commandeFournisseurLogId commande_fournisseur_logId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommandeFournisseurLog>;
    public commandeCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingGET1(commandeFournisseurLogId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandeFournisseurLogId === null || commandeFournisseurLogId === undefined) {
            throw new Error('Required parameter commandeFournisseurLogId was null or undefined when calling commandeCommandeFournisseurLogsUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCommandeFournisseurLog>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs/${encodeURIComponent(String(commandeFournisseurLogId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public commandeCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandeFournisseurLogsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCommandeFournisseurLog>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public commandeCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandeFournisseurLogsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCommandeFournisseurLog>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseur_logs
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurLog>;
    public commandeCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurLog>>;
    public commandeCommandeFournisseurLogsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandeFournisseurLogsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurLogsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCommandeFournisseurLog>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseur_logs`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param commandeFournisseurdetId commande_fournisseurdetId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingDELETE(commandeFournisseurdetId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public commandeCommandeFournisseurdetsUsingDELETE(commandeFournisseurdetId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public commandeCommandeFournisseurdetsUsingDELETE(commandeFournisseurdetId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public commandeCommandeFournisseurdetsUsingDELETE(commandeFournisseurdetId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandeFournisseurdetId === null || commandeFournisseurdetId === undefined) {
            throw new Error('Required parameter commandeFournisseurdetId was null or undefined when calling commandeCommandeFournisseurdetsUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets/${encodeURIComponent(String(commandeFournisseurdetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public commandeCommandeFournisseurdetsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public commandeCommandeFournisseurdetsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public commandeCommandeFournisseurdetsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurdet>;
    public commandeCommandeFournisseurdetsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCommandeFournisseurdet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param commandeFournisseurdetId commande_fournisseurdetId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingGET1(commandeFournisseurdetId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommandeFournisseurdet>;
    public commandeCommandeFournisseurdetsUsingGET1(commandeFournisseurdetId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingGET1(commandeFournisseurdetId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingGET1(commandeFournisseurdetId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandeFournisseurdetId === null || commandeFournisseurdetId === undefined) {
            throw new Error('Required parameter commandeFournisseurdetId was null or undefined when calling commandeCommandeFournisseurdetsUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCommandeFournisseurdet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets/${encodeURIComponent(String(commandeFournisseurdetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurdet>;
    public commandeCommandeFournisseurdetsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandeFournisseurdetsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCommandeFournisseurdet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurdet>;
    public commandeCommandeFournisseurdetsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandeFournisseurdetsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCommandeFournisseurdet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommande_fournisseurdets
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandeFournisseurdetsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandeFournisseurdet>;
    public commandeCommandeFournisseurdetsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandeFournisseurdet>>;
    public commandeCommandeFournisseurdetsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandeFournisseurdetsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandeFournisseurdetsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCommandeFournisseurdet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commande_fournisseurdets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param commandedetId commandedetId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingDELETE(commandedetId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public commandeCommandedetsUsingDELETE(commandedetId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public commandeCommandedetsUsingDELETE(commandedetId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public commandeCommandedetsUsingDELETE(commandedetId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandedetId === null || commandedetId === undefined) {
            throw new Error('Required parameter commandedetId was null or undefined when calling commandeCommandedetsUsingDELETE.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets/${encodeURIComponent(String(commandedetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingDELETE1(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public commandeCommandedetsUsingDELETE1(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public commandeCommandedetsUsingDELETE1(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public commandeCommandedetsUsingDELETE1(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingDELETE1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandedet>;
    public commandeCommandedetsUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCommandedet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param commandedetId commandedetId
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingGET1(commandedetId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommandedet>;
    public commandeCommandedetsUsingGET1(commandedetId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommandedet>>;
    public commandeCommandedetsUsingGET1(commandedetId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommandedet>>;
    public commandeCommandedetsUsingGET1(commandedetId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (commandedetId === null || commandedetId === undefined) {
            throw new Error('Required parameter commandedetId was null or undefined when calling commandeCommandedetsUsingGET1.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/hal+json'
        ];

        return this.httpClient.get<EntityModelCommandedet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets/${encodeURIComponent(String(commandedetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingPATCH(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandedet>;
    public commandeCommandedetsUsingPATCH(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingPATCH(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingPATCH(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandedetsUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<CollectionModelCommandedet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingPOST(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandedet>;
    public commandeCommandedetsUsingPOST(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingPOST(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingPOST(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandedetsUsingPOST.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<CollectionModelCommandedet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * commandeCommandedets
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public commandeCommandedetsUsingPUT(body: Array<string>, id: number, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommandedet>;
    public commandeCommandedetsUsingPUT(body: Array<string>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingPUT(body: Array<string>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommandedet>>;
    public commandeCommandedetsUsingPUT(body: Array<string>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling commandeCommandedetsUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling commandeCommandedetsUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/uri-list',
            'application/x-spring-data-compact+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<CollectionModelCommandedet>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}/commandedets`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteCommande
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCommandeUsingDELETE(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCommandeUsingDELETE(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCommandeUsingDELETE(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCommandeUsingDELETE(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCommandeUsingDELETE.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findAllCommande
     * 
     * @param page page
     * @param size size
     * @param sort sort
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllCommandeUsingGET(page?: number, size?: number, sort?: string, observe?: 'body', reportProgress?: boolean): Observable<CollectionModelCommande>;
    public findAllCommandeUsingGET(page?: number, size?: number, sort?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionModelCommande>>;
    public findAllCommandeUsingGET(page?: number, size?: number, sort?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionModelCommande>>;
    public findAllCommandeUsingGET(page?: number, size?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/hal+json',
            'application/json',
            'application/x-spring-data-compact+json',
            'text/uri-list'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionModelCommande>(`${this.basePath}/commandes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByIdCommande
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByIdCommandeUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommande>;
    public findByIdCommandeUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommande>>;
    public findByIdCommandeUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommande>>;
    public findByIdCommandeUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findByIdCommandeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EntityModelCommande>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCommande
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCommandeUsingPATCH(body: Commande, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommande>;
    public saveCommandeUsingPATCH(body: Commande, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommande>>;
    public saveCommandeUsingPATCH(body: Commande, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommande>>;
    public saveCommandeUsingPATCH(body: Commande, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCommandeUsingPATCH.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveCommandeUsingPATCH.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<EntityModelCommande>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCommande
     * 
     * @param body body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCommandeUsingPOST(body: Commande, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommande>;
    public saveCommandeUsingPOST(body: Commande, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommande>>;
    public saveCommandeUsingPOST(body: Commande, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommande>>;
    public saveCommandeUsingPOST(body: Commande, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCommandeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<EntityModelCommande>(`${this.basePath}/commandes`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveCommande
     * 
     * @param body body
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveCommandeUsingPUT(body: Commande, id: number, observe?: 'body', reportProgress?: boolean): Observable<EntityModelCommande>;
    public saveCommandeUsingPUT(body: Commande, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EntityModelCommande>>;
    public saveCommandeUsingPUT(body: Commande, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EntityModelCommande>>;
    public saveCommandeUsingPUT(body: Commande, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling saveCommandeUsingPUT.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling saveCommandeUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<EntityModelCommande>(`${this.basePath}/commandes/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
